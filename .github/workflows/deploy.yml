name: Build and Deploy Python Metrics Demo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  IMAGE_REPO: python-metrics-demo

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          cd python-metrics-demo/app
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 227295996532.dkr.ecr.ap-northeast-1.amazonaws.com
          docker build -t python-metrics-demo .
          docker tag python-metrics-demo:latest 227295996532.dkr.ecr.ap-northeast-1.amazonaws.com/python-metrics-demo:latest
          docker push 227295996532.dkr.ecr.ap-northeast-1.amazonaws.com/python-metrics-demo:latest

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ secrets.AWS_REGION1 }}

      - name: Create namespaces
        run: |
          kubectl create ns demo2285 --dry-run=client -o yaml | kubectl apply -f -
          kubectl create ns monitoring2285 --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Python App
        run: |
          cd python-metrics-demo
          envsubst < k8s/python-app.yaml | kubectl apply -f -

      - name: Deploy Prometheus
        run: |
          cd python-metrics-demo
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus -n monitoring2285 -f k8s/prometheus-values.yaml

      # - name: Create Grafana Dashboards ConfigMaps
      #   run: |
      #     cd python-metrics-demo
      #     kubectl create configmap python-dashboard \
      #       -n monitoring2285 \
      #       --from-file=k8s/dashboards/python_app_requests.json \
      #       --from-file=k8s/dashboards/cluster_overview.json \
      #       -o yaml --dry-run=client | kubectl apply -f -
      #     kubectl label configmap python-dashboard -n monitoring2285 grafana_dashboard="1" --overwrite

      # - name: Install grafanactl
      #   run: |
      #     cd /tmp
      #     sudo curl -L -o grafanactl.tar.gz https://github.com/grafana/grafanactl/releases/download/v0.1.5/grafanactl_Linux_x86_64.tar.gz
      #     sudo tar -xzf grafanactl.tar.gz
      #     sudo mv grafanactl /usr/local/bin/
      #     sudo chmod +x /usr/local/bin/grafanactl
        

      # - name: Upload Grafana Dashboards
      #   env:
      #          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      #   run: |
      #        cd python-metrics-demo
      #        grafanactl import-dashboards \
      #         --grafana-url http://$(kubectl get svc grafana -n monitoring2285 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'):80 \
      #         --api-key $GRAFANA_API_KEY \
      #         --folder "EKS Monitoring" \
      #         --dashboards-dir k8s/dashboards/

      # - name: Upload Grafana Dashboards
      #   env:
      #       GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
      #   run: |
      #     sudo apt update
      #     sudo apt install -y python3-pip
      #     pip install grafana-client --break-system-packages
          
      #     cat <<'PY' > import_dashboards.py
      #     from grafana_client import GrafanaApi
      #     import os, json
          
      #     GRAFANA_HOST = "http://a9f3bae50561b4ef1a71bf4bdae52971-1305649414.ap-northeast-1.elb.amazonaws.com/"
      #     API_KEY = os.getenv("GRAFANA_API_KEY")
      #     DASHBOARD_PATH = "python-metrics-demo/k8s/dashboards"
      #     FOLDER_NAME = "EKS Monitoring"
          
      #     grafana = GrafanaApi.from_url(GRAFANA_HOST, API_KEY)
      #     folders = grafana.folders.list_folders()
      #     folder_id = next((f["id"] for f in folders if f["title"] == FOLDER_NAME), None)
      #     if not folder_id:
      #         created = grafana.folders.add_folder(title=FOLDER_NAME)  
      #         folder_id = created["id"]
      #         print(f" Created folder '{FOLDER_NAME}'")
          
      #     for file in os.listdir(DASHBOARD_PATH):
      #         if file.endswith(".json"):
      #             path = os.path.join(DASHBOARD_PATH, file)
      #             with open(path) as f:
      #                 data = json.load(f)
      #             grafana.dashboards.update_dashboard({
      #                 "dashboard": data,
      #                 "folderId": folder_id,
      #                 "overwrite": True
      #             })
      #             print(f"‚úÖ Imported {file}")
      #     PY
          
      #     python3 import_dashboards.py



      - name: Upload Grafana Dashboards
        env:
          GRAFANA_SERVER: a9f3bae50561b4ef1a71bf4bdae52971-1305649414.ap-northeast-1.elb.amazonaws.com
          GRAFANA_STACK_ID: local
          GRAFANA_TOKEN: 
          GRAFANACTL_VERSION: v0.1.5
        run: |
          echo "üîß Installing grafanactl..."
          curl -L -o grafanactl-x86_64.tar.gz "https://github.com/grafana/grafanactl/releases/download/${GRAFANACTL_VERSION}/grafanactl_Linux_x86_64.tar.gz"
          tar -xzf grafanactl-x86_64.tar.gz
          chmod +x grafanactl
          sudo mv grafanactl /usr/local/bin/grafanactl

          echo "üìä Deploying dashboards using grafanactl..."
          if [ -d python-metrics-demo/k8s/dashboards ]; then
            grafanactl resources push dashboards --path python-metrics-demo/k8s/dashboards/
          else
            echo "‚ùå Dashboards directory not found: python-metrics-demo/k8s/dashboards"
            exit 1
          fi



      - name: Deploy Grafana
        run: |
          cd python-metrics-demo
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana -n monitoring2285 -f k8s/grafana-values.yaml

      - name: Verify Deployments
        run: |
          kubectl get pods -n demo2285
          kubectl get pods -n monitoring2285
          kubectl get svc -n monitoring2285


